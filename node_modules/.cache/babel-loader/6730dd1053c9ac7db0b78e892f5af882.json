{"remainingRequest":"/Users/tangjun/www/strayjoke-admin/node_modules/thread-loader/dist/cjs.js!/Users/tangjun/www/strayjoke-admin/node_modules/babel-loader/lib/index.js!/Users/tangjun/www/strayjoke-admin/node_modules/eslint-loader/index.js??ref--13-0!/Users/tangjun/www/strayjoke-admin/src/mock/index.js","dependencies":[{"path":"/Users/tangjun/www/strayjoke-admin/src/mock/index.js","mtime":1545219866000},{"path":"/Users/tangjun/www/strayjoke-admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tangjun/www/strayjoke-admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tangjun/www/strayjoke-admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tangjun/www/strayjoke-admin/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\nimport axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { Users } from './data/user';\nexport default {\n  init: function init() {\n    var mock = new MockAdapter(axios); //获取用户列表\n\n    mock.onGet('/users/list').reply(function (config) {\n      var name = config.params.name;\n      var mockUsers = Users.filter(function (user) {\n        if (name && user.name.indexOf(name) == -1) return false;\n        return true;\n      });\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          resolve([200, {\n            success: true,\n            users: mockUsers\n          }]);\n        }, 1000);\n      });\n    }); //获取用户列表（分页）\n\n    mock.onGet('/users/listpage').reply(function (config) {\n      var _config$params = config.params,\n          page = _config$params.page,\n          name = _config$params.name;\n      var mockUsers = Users.filter(function (user) {\n        if (name && user.name.indexOf(name) == -1) return false;\n        return true;\n      });\n      var total = mockUsers.length;\n      mockUsers = mockUsers.filter(function (u, index) {\n        return index < 10 * page && index >= 10 * (page - 1);\n      });\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          resolve([200, {\n            success: true,\n            total: total,\n            users: mockUsers\n          }]);\n        }, 1000);\n      });\n    }); //新增用户\n\n    mock.onGet('/users/add').reply(function (config) {\n      var _config$params2 = config.params,\n          name = _config$params2.name,\n          mobile = _config$params2.mobile,\n          id = _config$params2.id,\n          birth = _config$params2.birth,\n          sex = _config$params2.sex;\n\n      _Users.push({\n        name: name,\n        id: id,\n        mobile: mobile,\n        birth: birth,\n        sex: sex\n      });\n\n      return new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          resolve([200, {\n            success: true,\n            msg: '新增成功'\n          }]);\n        }, 500);\n      });\n    });\n  }\n};",{"version":3,"sources":["/Users/tangjun/www/strayjoke-admin/src/mock/index.js"],"names":["axios","MockAdapter","Users","init","mock","onGet","reply","config","name","params","mockUsers","filter","user","indexOf","Promise","resolve","reject","setTimeout","success","users","page","total","length","u","index","mobile","id","birth","sex","_Users","push","msg"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport MockAdapter from 'axios-mock-adapter';\nimport { Users } from './data/user';\n\nexport default{\n\t\n\tinit(){ \n\t\tlet mock = new MockAdapter(axios);\n\t\t//获取用户列表\n\t\tmock.onGet('/users/list').reply(config => {\n\t\t\tlet {name} = config.params;\n\t\t\tlet mockUsers = Users.filter(user => {\n\t\t\t\tif (name && user.name.indexOf(name) == -1) return false;\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve([200, {\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\tusers: mockUsers\n\t\t\t\t\t}]);\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\n\t\t//获取用户列表（分页）\n\t\tmock.onGet('/users/listpage').reply(config => {\n\t\t\tlet {page, name} = config.params;\n\t\t\tlet mockUsers = Users.filter(user => {\n\t\t\t\tif (name && user.name.indexOf(name) == -1) return false;\n\t\t\t\treturn true;\n\t\t\t});\n\t\t\tlet total = mockUsers.length;\n\t\t\tmockUsers = mockUsers.filter((u, index) => index < 10 * page && index >= 10 * (page - 1));\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve([200, {\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\ttotal: total,\n\t\t\t\t\t\tusers: mockUsers\n\t\t\t\t\t}]);\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t});\n\n\t\t//新增用户\n\t\tmock.onGet('/users/add').reply(config => {\n\t\t\tlet { name, mobile, id, birth, sex } = config.params;\n\t\t\t_Users.push({\n\t\t\t\tname: name,\n\t\t\t\tid: id,\n\t\t\t\tmobile: mobile,\n\t\t\t\tbirth: birth,\n\t\t\t\tsex: sex\n\t\t\t});\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresolve([200, {\n\t\t\t\t\t\tsuccess: true,\n\t\t\t\t\t\tmsg: '新增成功'\n\t\t\t\t\t}]);\n\t\t\t\t}, 500);\n\t\t\t});\n\t\t});\n\t}\n}\n\n\n"]}]}